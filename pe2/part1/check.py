#!/usr/bin/env python3
import unittest
import unittest.mock
import importlib
import sys
import pathlib
import random
import io
import binascii
import string
import utility

#Make this change to your check.py ####################
#import solution as student
import deliverable as student

# random.choices added in v3.6
def choices(population,k=1):
    return [random.choice(population) for i in range(k)]

random.choices = choices
######################################################

class TestPart1(unittest.TestCase):

    def bits(self, msg):
        for byte in msg:
            for bit in range(7,-1,-1):
                yield (byte>>bit) & 0x1
        while True:
            yield None

    def set_lsb(self, msgbit,coverbyte):
        if msgbit is None:
            return coverbyte
        if msgbit and not (coverbyte & 0x1):
            return coverbyte | 0x1
        elif not msgbit and (coverbyte & 0x1):
            return coverbyte & ~0x1
        else:
            return coverbyte

    def decode_pgm(infile):
        msg = bytearray()

        with open(infile,'rb') as fp:
            data = fp.read()

        ri = utility.raster_index(data)

        lsb = data[ri] & 0x1
        while True:
            msgbyte = 0
            for shift in range(7,-1,-1):
                msgbyte |= (data[ri] & 0x1) << shift
                ri += 1
            if msgbyte == 0x80:
                break
            msg.append(msgbyte)
        return msg

    def encode_pgm(self, msg, infile, outfile):
        '''LSB encodes a message
        Args:
            msg (bytes): bytes object to encode
            infile (str): the of the raw PGM file on disk to use as the cover
            outfile (str): the name of the new PGM file to write
        Returns:
            None
        '''
        msg = bytearray(msg)
        msg.append(0x80)

        with open(infile,'rb') as fp:
            data = bytearray(fp.read())

        ri = utility.raster_index(data)
        bit = self.bits(msg)

        for i in range(ri,len(data)):
            data[i] = self.set_lsb(next(bit),data[i])

        with open(outfile,'wb') as fp:
            fp.write(data)


    def setUp(self):
        self.stegname = 'stego.pgm'
        self.covername = 'plain.pgm'
        self.msg = bytes(''.join(random.choices(string.ascii_lowercase,k=random.randint(10,50))),encoding='ascii')
        self.data0 = binascii.a2b_base64(b'\n')

    def correct_encode(self):
        coverfp = io.BytesIO(self.data0)
        stegfp = io.BytesIO()
        mockfileobj = unittest.mock.MagicMock(wraps=stegfp)
        mockfileobj.__enter__.return_value = mockfileobj
        mockfileobj.close.return_value = None

        def side_effect(filename,mode='r',**kwargs):
            if filename == self.stegname:
                return mockfileobj
            elif filename == self.covername:
                return coverfp
            else:
                raise FileNotFoundError

        with unittest.mock.patch('builtins.open',side_effect=side_effect) as m:
            self.encode_pgm(self.msg,self.covername,self.stegname)
            return stegfp.getvalue()

    def test_encode_pgm(self):
        coverfp = io.BytesIO(self.data0)
        stegfp = io.BytesIO()
        mockfileobj = unittest.mock.MagicMock(wraps=stegfp)
        mockfileobj.__enter__.return_value = mockfileobj
        mockfileobj.close.return_value = None

        def side_effect(filename,mode='rb',**kwargs):
            if filename == self.stegname:
                return mockfileobj
            elif filename == self.covername:
                return coverfp
            else:
                raise FileNotFoundError

        with unittest.mock.patch('builtins.open',side_effect=side_effect) as m:
            student.encode_pgm(self.msg,self.covername,self.stegname)
            answered = stegfp.getvalue()
            self.assertEqual(answered,self.correct_encode())

    def test_decode_pgm(self):
        stegfp = io.BytesIO(self.correct_encode())
        mockfileobj = unittest.mock.MagicMock(wraps=stegfp)
        mockfileobj.__enter__.return_value = mockfileobj
        mockfileobj.close.return_value = None

        def side_effect(filename,mode='rb',**kwargs):
            if filename == self.stegname:
                return mockfileobj
            else:
                raise FileNotFoundError

        with unittest.mock.patch('builtins.open',side_effect=side_effect) as m:
            answered = student.decode_pgm(self.stegname)
            self.assertEqual(answered,self.msg)




if __name__ == '__main__':
    unittest.main()
